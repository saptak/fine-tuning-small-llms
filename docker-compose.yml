version: '3.8'

services:
  # Ollama service for model serving
  ollama:
    image: ollama/ollama:latest
    container_name: llm-ollama
    volumes:
      - ollama_data:/root/.ollama
      - ./models/gguf:/models
    ports:
      - "11434:11434"
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=*
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Development Jupyter environment
  jupyter:
    build:
      context: ./docker/images/jupyter
      dockerfile: Dockerfile
    container_name: llm-jupyter
    ports:
      - "8888:8888"
    volumes:
      - .:/workspace
      - ./data:/workspace/data
      - ./models:/workspace/models
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=fine-tuning-llms
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # API service
  api:
    build:
      context: .
      dockerfile: ./docker/images/api/Dockerfile
    container_name: llm-api
    environment:
      - OLLAMA_HOST=ollama
      - OLLAMA_PORT=11434
      - MODEL_NAME=sql-expert
      - API_HOST=0.0.0.0
      - API_PORT=8000
    ports:
      - "8000:8000"
    depends_on:
      - ollama
      - redis
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  # Streamlit web interface
  web:
    build:
      context: .
      dockerfile: ./docker/images/web/Dockerfile
    container_name: llm-web
    environment:
      - API_BASE_URL=http://api:8000
    ports:
      - "8501:8501"
    depends_on:
      - api
    restart: unless-stopped

  # Redis for caching and session management
  redis:
    image: redis:alpine
    container_name: llm-redis
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: llm-prometheus
    volumes:
      - ./part6-production/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: llm-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./part6-production/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./part6-production/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  ollama_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: llm-fine-tuning-network
